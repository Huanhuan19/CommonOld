<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Abs" xml:space="preserve">
    <value>求绝对值</value>
  </data>
  <data name="Avg" xml:space="preserve">
    <value>求两数的平均值</value>
  </data>
  <data name="Cos" xml:space="preserve">
    <value>求余弦值</value>
  </data>
  <data name="Cot" xml:space="preserve">
    <value>求余切值</value>
  </data>
  <data name="DelayIndex" xml:space="preserve">
    <value>获得数据的对应时间轴索引</value>
  </data>
  <data name="DelayIndexData" xml:space="preserve">
    <value>按数据的对应时间轴索引获得数据</value>
  </data>
  <data name="Dif" xml:space="preserve">
    <value>求导数，第一个参数为dy，第二个参数为dx，第三个参数为总间隔点数</value>
  </data>
  <data name="Exp" xml:space="preserve">
    <value>e的指定次幂</value>
  </data>
  <data name="Get" xml:space="preserve">
    <value>按数据的顺序索引获得数据</value>
  </data>
  <data name="HR" xml:space="preserve">
    <value>获得心跳数据</value>
  </data>
  <data name="Index" xml:space="preserve">
    <value>获得数据索引</value>
  </data>
  <data name="IndexData" xml:space="preserve">
    <value>按索引取得数据</value>
  </data>
  <data name="Int" xml:space="preserve">
    <value>求积分，第一个参数为被积数，第二个参数为dy，第三个参数为dx</value>
  </data>
  <data name="Log" xml:space="preserve">
    <value>求指定底数的对数</value>
  </data>
  <data name="Log10" xml:space="preserve">
    <value>求10为底的对数</value>
  </data>
  <data name="Max" xml:space="preserve">
    <value>求两数中的大值</value>
  </data>
  <data name="Min" xml:space="preserve">
    <value>求两数中小值</value>
  </data>
  <data name="Pow" xml:space="preserve">
    <value>求指定数字的指定次幂</value>
  </data>
  <data name="Rem" xml:space="preserve">
    <value>两数相除之余</value>
  </data>
  <data name="Rnd" xml:space="preserve">
    <value>将小数舍人到指定精度</value>
  </data>
  <data name="Sin" xml:space="preserve">
    <value>求正弦值</value>
  </data>
  <data name="Smth" xml:space="preserve">
    <value>平滑算法</value>
  </data>
  <data name="Sqrt" xml:space="preserve">
    <value>求平方根</value>
  </data>
  <data name="Tad" xml:space="preserve">
    <value>获得同一列连续两行数据之和</value>
  </data>
  <data name="Tan" xml:space="preserve">
    <value>求正切值</value>
  </data>
  <data name="Time" xml:space="preserve">
    <value>获得数据的实验次数</value>
  </data>
  <data name="TM" xml:space="preserve">
    <value>获得数据的时间戳</value>
  </data>
  <data name="Tsl" xml:space="preserve">
    <value>获得脉冲型传感器的两次下沿时间差</value>
  </data>
  <data name="Tsl2" xml:space="preserve">
    <value>获得两个脉冲型传感器的同次下沿时间差</value>
  </data>
</root>